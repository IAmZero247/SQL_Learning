-----------------------====================-----------------------
-----------------------  SQL STATEMENT -----------------------
-----------------------====================-----------------------



Note: When we use select into to load value into scalar variable, it should return only single row


-----------------------===================-----------------------

Example 1: DQL Example 1
/************************************************************/
SET SERVEROUTPUT ON;
SET AUTOPRINT ON;



DECLARE
  v_name   VARCHAR2(50);
  v_salary employees.salary%type;
BEGIN
  SELECT first_name ||' '|| last_name, salary 
  INTO   v_name, v_salary  
  FROM   employees 
  WHERE  employee_id = 130;
  DBMS_OUTPUT.PUT_LINE('The salary of '|| v_name || ' is : '|| v_salary);
END;
 

/************************************************************/


The salary of Mozhe Atkinson is : 2800


PL/SQL procedure successfully completed.

/************************************************************/
Example 1: DQL Example 2 - sysdate function value into variable
/************************************************************/
SET SERVEROUTPUT ON;
SET AUTOPRINT ON;



DECLARE
  v_name      VARCHAR2(50);
  v_sysdate   employees.hire_date%type;
  v_employee_id employees.employee_id%type := 130;
BEGIN 
  SELECT first_name ||' '|| last_name, sysdate 
  INTO   v_name, v_sysdate 
  FROM   employees 
  WHERE  employee_id = v_employee_id;
  DBMS_OUTPUT.PUT_LINE('The salary of '|| v_name || ' is : '|| v_sysdate );
END;
/************************************************************/
The salary of Mozhe Atkinson is : 25-DEC-22 21:11:09


PL/SQL procedure successfully completed.
/************************************************************/
Example 1: DML -Insert Update And Delete 
/************************************************************/
CREATE TABLE employees_copy AS SELECT * FROM employees;

SET SERVEROUTPUT ON;
SET AUTOPRINT ON;

DECLARE
  v_employee_id     PLS_INTEGER := 0;
  v_salary_increase NUMBER      := 400;
BEGIN
  FOR i IN 217..226 LOOP
    -- INSERT INTO employees_copy 
    -- (employee_id, first_name, last_name, email, hire_date, job_id, salary)
    -- VALUES
    -- (i, 'employee#'||i,'temp_emp','abc@xmail.com',sysdate,'IT_PROG',1000);
	
    -- UPDATE employees_copy 
    -- SET    salary = salary + v_salary_increase
    -- WHERE  employee_id = i;
	
    DELETE FROM employees_copy
    WHERE employee_id = i;
  END LOOP;
END; 

/************************************************************/
Example 1: Sequences 
/************************************************************/
/******************** Creating a Sequence *******************/
CREATE SEQUENCE employee_id_seq 
START WITH 207
INCREMENT BY 1;
/********************        Ended        *******************/
DECLARE
BEGIN
  FOR i IN 1..10 LOOP
    INSERT INTO employees_copy 
      (employee_id,first_name,last_name,email,hire_date,job_id,salary)
    VALUES 
      (employee_id_seq.nextval,'employee#'||employee_id_seq.nextval,'temp_emp','abc@xmail.com',sysdate,'IT_PROG',1000);
  END LOOP;
END; 

DECLARE
  v_seq_num NUMBER;
BEGIN
  SELECT employee_id_seq.nextval 
  INTO   v_seq_num 
  FROM   dual;
  DBMS_OUTPUT.PUT_LINE(v_seq_num);
END;

DECLARE
  v_seq_num NUMBER;
BEGIN
  SELECT employee_id_seq.nextval 
  INTO   v_seq_num 
  FROM   employees_copy 
  WHERE  rownum = 1;
  DBMS_OUTPUT.PUT_LINE(v_seq_num);
END;

DECLARE
  v_seq_num NUMBER;
BEGIN
  v_seq_num := employee_id_seq.nextval; 
  DBMS_OUTPUT.PUT_LINE(v_seq_num);
END;

BEGIN
  DBMS_OUTPUT.PUT_LINE(employee_id_seq.nextval);
END;
 
BEGIN
  DBMS_OUTPUT.PUT_LINE(employee_id_seq.currval);
END;
-----------------------===================-----------------------
